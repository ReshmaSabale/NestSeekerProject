// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NestSeeker.Persistence;

namespace NestSeeker.Data.Migrations
{
    [DbContext(typeof(NestSeekerContext))]
    [Migration("20201018105636_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("NestSeeker.Data.Model.BHKType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("PropertyID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropertyID");

                    b.ToTable("BHKTypes");
                });

            modelBuilder.Entity("NestSeeker.Data.Model.Direction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("PropertyID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropertyID");

                    b.ToTable("Directions");
                });

            modelBuilder.Entity("NestSeeker.Data.Model.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Value")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("NestSeeker.Data.Model.MyFavourites", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<int>("UserRoleId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PropertyId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("MyFavourite");
                });

            modelBuilder.Entity("NestSeeker.Data.Model.Property", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Amenities")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("BHKTypeId")
                        .HasColumnType("int");

                    b.Property<int>("BalconyCount")
                        .HasColumnType("int");

                    b.Property<int>("BathroomCount")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ConstructionYear")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<int>("DirectionId")
                        .HasColumnType("int");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int");

                    b.Property<string>("Landmarks")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("MyFavouritesID")
                        .HasColumnType("int");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("Parking")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PropertyType")
                        .HasColumnType("int");

                    b.Property<int?>("RequestsID")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("TotalBuiltupArea")
                        .HasColumnType("int");

                    b.Property<int>("TotalCarpetArea")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("BHKTypeId");

                    b.HasIndex("DirectionId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("MyFavouritesID");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PropertyType");

                    b.HasIndex("RequestsID");

                    b.HasIndex("StatusId");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("NestSeeker.Data.Model.PropertyType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<int?>("PropertyID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PropertyID");

                    b.ToTable("PropertyTypes");
                });

            modelBuilder.Entity("NestSeeker.Data.Model.Requests", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AmountRequested")
                        .HasColumnType("decimal(14,2)");

                    b.Property<DateTime>("AvailiableOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime>("DateAdded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(14,2)");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PropertyId");

                    b.HasIndex("TransactionType");

                    b.ToTable("Request");
                });

            modelBuilder.Entity("NestSeeker.Data.Model.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("NestSeeker.Data.Model.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("PropertyID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropertyID");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("NestSeeker.Data.Model.TransactionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("RequestsID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequestsID");

                    b.ToTable("TransactionTypes");
                });

            modelBuilder.Entity("NestSeeker.Data.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Pin")
                        .IsRequired()
                        .HasColumnType("varchar(6)");

                    b.Property<int?>("UserRoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserRoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("NestSeeker.Data.Model.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("MyFavouritesID")
                        .HasColumnType("int");

                    b.Property<int?>("PropertyID")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MyFavouritesID");

                    b.HasIndex("PropertyID");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("NestSeeker.Data.Model.BHKType", b =>
                {
                    b.HasOne("NestSeeker.Data.Model.Property", null)
                        .WithMany("BHKTypes")
                        .HasForeignKey("PropertyID");
                });

            modelBuilder.Entity("NestSeeker.Data.Model.Direction", b =>
                {
                    b.HasOne("NestSeeker.Data.Model.Property", null)
                        .WithMany("Directions")
                        .HasForeignKey("PropertyID");
                });

            modelBuilder.Entity("NestSeeker.Data.Model.Document", b =>
                {
                    b.HasOne("NestSeeker.Data.Model.Property", "Property")
                        .WithMany("Documents")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("NestSeeker.Data.Model.MyFavourites", b =>
                {
                    b.HasOne("NestSeeker.Data.Model.Property", "Property")
                        .WithMany("MyFavourites")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NestSeeker.Data.Model.UserRole", "UserRole")
                        .WithMany("MyFavourites")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("NestSeeker.Data.Model.Property", b =>
                {
                    b.HasOne("NestSeeker.Data.Model.BHKType", "BHKType")
                        .WithMany("Property")
                        .HasForeignKey("BHKTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NestSeeker.Data.Model.Direction", "Direction")
                        .WithMany("Property")
                        .HasForeignKey("DirectionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NestSeeker.Data.Model.Document", null)
                        .WithMany("Properties")
                        .HasForeignKey("DocumentId");

                    b.HasOne("NestSeeker.Data.Model.MyFavourites", null)
                        .WithMany("Properties")
                        .HasForeignKey("MyFavouritesID");

                    b.HasOne("NestSeeker.Data.Model.UserRole", "UserRole")
                        .WithMany("Property")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NestSeeker.Data.Model.PropertyType", "PropertyTypes")
                        .WithMany("Property")
                        .HasForeignKey("PropertyType")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NestSeeker.Data.Model.Requests", null)
                        .WithMany("Properties")
                        .HasForeignKey("RequestsID");

                    b.HasOne("NestSeeker.Data.Model.Status", "Status")
                        .WithMany("Property")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("NestSeeker.Data.Model.PropertyType", b =>
                {
                    b.HasOne("NestSeeker.Data.Model.Property", null)
                        .WithMany("PropertType")
                        .HasForeignKey("PropertyID");
                });

            modelBuilder.Entity("NestSeeker.Data.Model.Requests", b =>
                {
                    b.HasOne("NestSeeker.Data.Model.Property", "Property")
                        .WithMany("Request")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NestSeeker.Data.Model.TransactionType", "TransactionTypes")
                        .WithMany("Request")
                        .HasForeignKey("TransactionType")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("NestSeeker.Data.Model.Status", b =>
                {
                    b.HasOne("NestSeeker.Data.Model.Property", null)
                        .WithMany("Statuss")
                        .HasForeignKey("PropertyID");
                });

            modelBuilder.Entity("NestSeeker.Data.Model.TransactionType", b =>
                {
                    b.HasOne("NestSeeker.Data.Model.Requests", null)
                        .WithMany("TransactionsType")
                        .HasForeignKey("RequestsID");
                });

            modelBuilder.Entity("NestSeeker.Data.Model.User", b =>
                {
                    b.HasOne("NestSeeker.Data.Model.UserRole", null)
                        .WithMany("Users")
                        .HasForeignKey("UserRoleId");
                });

            modelBuilder.Entity("NestSeeker.Data.Model.UserRole", b =>
                {
                    b.HasOne("NestSeeker.Data.Model.MyFavourites", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("MyFavouritesID");

                    b.HasOne("NestSeeker.Data.Model.Property", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("PropertyID");

                    b.HasOne("NestSeeker.Data.Model.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NestSeeker.Data.Model.User", "User")
                        .WithMany("UsersRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
